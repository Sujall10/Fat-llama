from pymongo import MongoClient
from dotenv import load_dotenv
import os
import pandas as pd

load_dotenv()
uri = os.getenv("url")

client = MongoClient(uri)

# try:
#     print("Connected successfully!")
#     print("Available databases:", client.list_database_names())
# except Exception as e:
#     print("Connection failed")
#     print("Error:", e)

db = client["fatllamaclone"]
# print("Collections:", db.list_collection_names())
'''
output:
"Collections: ['renters', 'items', 'providers', 'location', 'users', 'bookings']"
'''
renters_collection = db['renters']
items_collection = db['items']
providers_collection = db['providers']
location_collection = db['location']
users_collection = db['users']
bookings_collection = db['bookings']
# renter_data = list(renters_collection.find())

'''
MongoDB includes the _id field by default in every document.
That field is autogenerated by MongoDB and looks like:
"_id": ObjectId("67f7b366c2627ed6f11059c8")
that's y using "renter_data = list(renters_collection.find())", _id will be also imported
'''
renter_data = list(renters_collection.find({}, {"_id": 0}))
df_renters = pd.DataFrame(renter_data)
# print(df_renters)

items_data = list(items_collection.find({}, {"_id": 0}))
df_items = pd.DataFrame(items_data)
# print(df_items)

provider_data = list(providers_collection.find({}, {"_id": 0}))
df_provider = pd.DataFrame(provider_data)
# print(df_provider)

location_data = list(location_collection.find({}, {"_id": 0}))
df_location = pd.DataFrame(location_data)
# print(df_location)

users_data = list(users_collection.find({}, {"_id": 0}))
df_users = pd.DataFrame(users_data)
# print(df_users)

bookings_data = list(bookings_collection.find({}, {"_id": 0}))
df_bookings = pd.DataFrame(bookings_data)
# print(df_bookings)

